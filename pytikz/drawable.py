from abc import ABC, abstractmethod
from .shape import Shape


class AbstractDrawer(ABC):
    """Abstract Drawer class.

    A Drawer instance contains style information for a shape.
    """

    @abstractmethod
    def draw(self, shape):
        """Must turn the shape into a string."""
        pass


class Drawable:
    """Class for drawables containing both shape and style information.

    Args:
        drawer: The drawer object called to draw the shape.
        shape: The shape to be drawn.
    """

    def __init__(self, drawer, shape):
        assert issubclass(type(drawer), AbstractDrawer)
        assert issubclass(type(shape), Shape)
        self.drawer = drawer
        self.shape = shape

    def copy(self):
        """Returns the same Drawable except that .shape is copied."""
        return Drawable(self.drawer, self.shape.copy())

    def apply(self, transformation):
        """Returns itself with the transformation applied to .shape."""
        self.shape.apply(transformation)
        return self

    def __str__(self):
        """Returns the string representation of the shape generated by the drawer."""
        return self.drawer.draw(self.shape)


class Drawer(AbstractDrawer):
    """Basic Drawer class for drawing lines and filling shapes.

    This class draws lines and fills areas for simple shapes.
    There is no constructor, however, the style attributes defined below can be altered directly.
    """

    line = True
    line_color = None
    line_width = None
    line_join = None

    fill = False
    fill_color = None

    def draw(self, shape):
        if self.fill:
            assert shape.cycle

        if not self.line:
            if self.fill:
                return f"\\fill[{self.fill_color}] {shape};"
            if not self.fill:
                return ""

        if self.line:

            options = []
            if self.line_color:
                options.append(self.line_color)
            if self.line_width:
                options.append(self.line_width.value)
            if self.line_join:
                options.append(f"line join={self.line_join.value}")
            if self.fill:
                options.append(f"fill={self.fill_color}")
            options = f"[{', '.join(options)}]" if options else ""

            return f"\\draw{options} {shape};"
